1.用户认证，实现方式采用账号密码验证，查数据库进行匹配。
2.用户权限，实现通过Bearer Token令牌和fastapi的依赖机制实现。
3.用户管理，使用orm框架实现用户的增删改查。
4.数据初始化上传， 实现，后端接受接口后使用pandas库进行加载和保存，方便后续处理。
5.数据处理， 使用pandas库进行聚合，求均值， 反差等操作。
6.数据可视化展示，实现，使用pandas库配合matplotlib库进行实现。
7.数据保存，删除，下载，这部分数据将按照一定的规则以文本方式保存到后端挂载的静态文件目录下，方便下载。
8.多商品模型训练，实现将数据按照商品id进行分组，分别使用prophet.fit接口训练，每个商品的模型相互独立。
9.模型评估， 实现按照RMSE的公式进行代码实现，将训练数据传入模型获取预测数据，最后将预测数据与实际数据做对比。
10.数据拟合情况可视化，实现，将训练数据传入模型获取预测数据，使用matplotlib将实际数据和预测数据化成图进行展示。
11.模型参数调整， 实现，通过改变prophet模型的初始化参数进行实现， 之前的模型会进行删除。
12.模型保存和加载，实现prophet.save接口实现，将模型保存为json文件
13.预测时间范围选择和预测，实现根据选择的时间范围，基于当前时间生成预测时间，根据指定的商品加载模型文件，将预测时间传入prophet.prodect接口。
14.预测结果可视化，实现跟数据拟合情况可视化功能类似，还包含了趋势图和预测范围图。
15.数据增量上传，实现用户上传每日销售数据，使用pandas进行处理后，保存到对应商品的数据文件中，等到下次训练模型时重新加载。
16.自动化训练，实现，使用定时任务，对指定商品，指定预测时间范围进行模型训练和预测， 保存每个商品的预测结果。
17.训练结果上传，实现通过smtplib，将模型训练的结果发送到指定邮箱。
18.系统对接--数据更新，实现，通过API接口，将数据以json的形式发送给服务，系统按照数据增量上传类似的方式处理和保存数据。
19.系统对接--预测数据获取，实现通过API接口和商品id在库中查询商品最新的预测结果，并发送给对方。